```javascript
const fs = require('fs');
const path = require('path');

function generateReadme() {
  const readmeContent = `# ThermWatch

ThermWatch is a temperature monitoring solution designed for high-value assets located inside plants. It provides plant operators with temperature data insights on assets to better plan plant operations.

## Features

- Real-time temperature monitoring dashboard
- Database management for company, plant, asset, and sensor profiles
- DAQ configuration for data acquisition from sensors
- Alerts and alarms system for temperature threshold breaches
- Import/export database functionality
- Mock data generation for demonstration purposes
- Dark themed UI with blue accents and toggle between Fahrenheit and Celsius

## Setup Instructions

1. Clone the repository from GitHub:
\`\`\`
git clone https://github.com/your-repository/ThermWatch.git
\`\`\`

2. Navigate to the cloned directory:
\`\`\`
cd ThermWatch
\`\`\`

3. Install dependencies:
\`\`\`
npm install
\`\`\`

4. Start the application in development mode:
\`\`\`
npm run dev
\`\`\`

5. To build the application for production:
\`\`\`
npm run build
\`\`\`

## Database Initialization

Run the \`initDb.js\` script to create a new database with the required models:

\`\`\`
node src/db/initDb.js
\`\`\`

## Adding Logo

To add your company logo to the UI, place your logo image in the \`src/renderer/assets\` directory and name it \`logo.png\`.

## Deployment

For deployment instructions, please refer to the \`electron-builder\` documentation.

## Testing

To run tests, execute the following command:

\`\`\`
npm run test
\`\`\`

## Contributing

To contribute to the project, please follow the standard fork, branch, and pull request workflow.

## Licensing

This application is a commercial product and uses a licensing framework to manage usage rights. Please refer to the \`LICENSE\` file for more information.

---

Generated by ThermWatch's readmeGenerator utility.
`;

  const readmePath = path.join(__dirname, '../../README.md');
  fs.writeFileSync(readmePath, readmeContent);
}

module.exports = {
  generateReadme
};
```